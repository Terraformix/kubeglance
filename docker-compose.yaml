version: '3.8' 

services:
  # ==========================
  # Node.js Application (kubeglance-server)
  # ==========================
  kubeglance-backend:
    build: ./kubeglance-backend  # Builds the application from the current directory (Dockerfile required)
    container_name: kubeglance-backend
    environment:
      - NODE_ENV=production  # Setting production environment for the app
    ports:
      - "3000:3000"  # Exposing the Node.js app on port 3000
    networks:
      - elk  # Connecting to the ELK network
    depends_on:
      - logstash  # Ensures Logstash starts before the app
    volumes:
      - ./kubeglance-backend/logs:/app/logs  # Mounting a logs directory for app logs (used by Filebeat)


  # ==========================
  # Vue.js Application (kubeglance-ui)
  # ==========================
  kubeglance-frontend:
    build: ./kubeglance-frontend # Builds the application from the current directory (Dockerfile required)
    container_name: kubeglance-frontend
    ports:
      - "5173:80"  # Exposing the Node.js app on port 3000
    networks:
      - elk  # Connecting to the ELK network
    depends_on:
      - kubeglance-backend  # Ensures Logstash starts before the app
    volumes:
      - ./kubeglance-frontend/nginx.conf:/etc/nginx/conf.d/default.conf  # Copy your custom Nginx config

  # ==========================
  # Elasticsearch Service
  # ==========================
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.6.0  # Elasticsearch official image
    container_name: elasticsearch
    environment:
      - discovery.type=single-node  # Running as a single-node cluster
      - xpack.security.enabled=false  # Disabling security (for local testing)
    ports:
      - "9200:9200"  # Exposing Elasticsearch API on port 9200
    networks:
      - elk  # Connecting to ELK network
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data  # Persisting Elasticsearch data

  # ==========================
  # Logstash Service (Log Processor)
  # ==========================
  logstash:
    image: docker.elastic.co/logstash/logstash:8.6.0  # Logstash official image
    container_name: logstash
    volumes:
      - ./kubeglance-backend/logstash/config/logstash.yml:/usr/share/logstash/config/logstash.yml  # Logstash main config
      - ./kubeglance-backend/logstash/pipeline:/usr/share/logstash/pipeline  # Mounting pipeline directory
    ports:
      - "5044:5044"  # Port for Filebeat to send logs
      - "9600:9600"  # Logstash monitoring API
    depends_on:
      - elasticsearch  # Ensuring Elasticsearch starts before Logstash
    networks:
      - elk  # Connecting to ELK network

  # ==========================
  # Kibana Service (Visualization UI)
  # ==========================
  kibana:
    image: docker.elastic.co/kibana/kibana:8.6.0  # Kibana official image
    container_name: kibana
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200  # Connecting Kibana to Elasticsearch
    ports:
      - "5601:5601"  # Exposing Kibana on port 5601
    depends_on:
      - elasticsearch  # Ensuring Elasticsearch is running before Kibana
    networks:
      - elk  # Connecting to ELK network

  # ==========================
  # Filebeat Service (Log Collector)
  # ==========================
  filebeat:
    image: docker.elastic.co/beats/filebeat:8.6.0  # Filebeat official image
    container_name: filebeat
    command:
      - "-e"  # Enable logging to stdout
      - "--strict.perms=false"  # Disable strict permissions check (useful in non-root environments)
    user: root  # Running Filebeat as root for access to logs
    volumes:
      - ./kubeglance-backend/filebeat/filebeat.yml:/usr/share/filebeat/filebeat.yml  # Filebeat configuration
      - ./kubeglance-backend/logs:/app/logs  # Reading logs from the application
    depends_on:
     - logstash  # Ensuring Logstash starts before Filebeat
    networks:
      - elk  # Connecting to ELK network

  # ==========================
  # Jenkins Service (CI/CD Server)
  # ==========================
  jenkins:
    build: .
    container_name: jenkins
    restart: unless-stopped
    user: root
    privileged: true
    ports:
      - "8080:8080"
      - "50000:50000"
    volumes:
      - jenkins-data:/var/jenkins_home
      - ~/.kube:/var/jenkins_home/.kube  # Mount kubeconfig for kubectl access
      - /var/run/docker.sock:/var/run/docker.sock  # Mount Docker socket to allow Jenkins to run Docker commands
    environment:
      - JAVA_OPTS=-Djenkins.install.runSetupWizard=true
      - KUBECONFIG=/var/jenkins_home/.kube/config
    networks:
      - elk  # Connecting to ELK network
    # depends_on:
    #   - sonarqube  # Ensuring SonarQube is available for Jenkins

  # ==========================
  # SonarQube Service (SAST Scanner)
  # ==========================
  sonarqube:
    image: sonarqube:lts-community
    container_name: sonarqube
    restart: unless-stopped
    depends_on:
      - sonar-db
    environment:
      - SONAR_JDBC_URL=jdbc:postgresql://sonar-db:5432/sonarqube
      - SONAR_JDBC_USERNAME=sonar
      - SONAR_JDBC_PASSWORD=sonar
    ports:
      - "9000:9000"  # SonarQube UI
    networks:
      - elk
    volumes:
      - sonarqube-data:/opt/sonarqube/data
      - sonarqube-extensions:/opt/sonarqube/extensions
      - sonarqube-logs:/opt/sonarqube/logs

  # ==========================
  # PostgreSQL for SonarQube
  # ==========================
  sonar-db:
    image: postgres:14
    container_name: sonar-db
    restart: unless-stopped
    environment:
      - POSTGRES_USER=sonar
      - POSTGRES_PASSWORD=sonar
      - POSTGRES_DB=sonarqube
    networks:
      - elk
    volumes:
      - sonar-db-data:/var/lib/postgresql/data

# ==========================
# Defining a Common Network
# ==========================
networks:
  elk:
    driver: bridge  # Creating an isolated bridge network for all ELK services

# ==========================
# Defining Named Volumes (Persistent Storage)
# ==========================
volumes:
  elasticsearch-data:
    driver: local
  jenkins-data:
    driver: local
  sonarqube-data:
    driver: local
  sonarqube-extensions:
    driver: local
  sonarqube-logs:
    driver: local
  sonar-db-data:
    driver: local